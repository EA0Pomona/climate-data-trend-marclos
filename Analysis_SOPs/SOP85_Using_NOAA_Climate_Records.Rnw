\documentclass{article}

\title{SOP 85: Using NOAA Climate Records}
\author{Marc Los Huertos}

\begin{document}
\maketitle

\section{Introduction}



\section{Preparing CSV files}

\subsection{Preprocessing CSV files}

In most cases, we don't need to preprocess the csv files. However, Mac users have been confronted with a host of problems that has something to do with how Macs format CSV files.\footnote{I will update this when I try using a Mac for this.}

\subsection{Upload CSV Files into Appropriate Rstudio Directory}

\section{Reading CSV Files into R}

Although the csv file might be present in an Rstudio directory, it is not in the R environment. One way to confirm this is to look at the Rstudio window tab `Environment', where the file listed. 

To have the file in the R environment, we read the file using the \verb!read.csv()! function. The function is expecting the path and name of the file as an argument inside the perentecies, which is tough to type without making errors. 

\subsection{Assigning the File Path and Name}

Okay, now we know what the file name and path look like from the eyes of R. In this example, the path and filename is:

\begin{verbatim}
"/home/CAMPUS/mwl04747/github/Climate_Change_Narratives/Data/Los Angeles_878024.csv"
\end{verbatim

We could paste the whole mess into the \texttt{read.csv()} function. Okay, let's keep moving. Although R was able to see the file, we still don't have an object we can actually do something with. Instead, we merely printed it to the screen. However, you have not created an object yet. To do this you need to assign it a name. So, what do we need to make an object?  Yes, the name of the object and the use of the assignment symbol. Let's create an object names filename instead that has the whole path and file name in it. Start with the name you want to use before the \texttt{read.csv()} function like this:

First, we will import the CSV file. In most cases, we don't need to preprocess the csv files. Use "file.choose" to find the folder path name. 

We will use a pop-up window to select the file the first time and then we'll assign the file path and name to an object. 

\begin{verbatim}
> choose.file()
\end{verbatim}

Need an impage of the pop-up window...

\subsection{Reading a CSV File into a Dataframe}

\begin{verbatim}
maunaloa <- read.csv(filename)
\end{verbatim}

\subsection{Importing CSV Files}


Importing Scripts

%file = "/home/CAMPUS/mwl04747/github/Climate_Change_Narratives/Data/Los Angeles_878024.csv"

import = read.csv(file)

<<>>=
# Read CSV

file = "/home/CAMPUS/kaj41925/Climate_Change_Narratives/Khalil/NewOrleansNOAAdata.csv"

import = read.csv(file)
@

\subsection{Confirming the Dataframe}


\subsection{Checking the Data}

Now we will check the data by plotting it.

%plot(TMAX~DATE, import)


\subsection{Checking the Data}

What's going on?  What is the deal with the -9999? These are used for missing data. We need to remove them!


%import$TMAX[import$TMAX==-9999] = NA
%import$TMIN[import$TMIN==-9999] = NA


Okay, now we'll check again, for dates less then Dec. 31, 1913:


%plot(TMAX~DATE, import[import$DATE<19131231,], ty='l')


Yikes! What's wrong? As it turns out the problem is that with how the dates are specified. In particular, the Dec 31 to Jan 1 transition: 

19131231 -> 19140101, if you use these as numbers it should be 19131232, 19131232, etc. You see we are missing lots numbers!


%plot(TMAX~DATE, import[import$DATE<19130102,], ty='l')


\subsection{Fixing the Dates}

First, we convert the date to a string of character values. Next, we'll convert the strings to a data format. 


%strDates <- as.character(import$DATE)
%head(strDates)
%import$NewDate <- as.Date(strDates, "%Y%m%d")


\subsection{Checking the New Dates}


%plot(TMAX~NewDate, import[import$DATE<19130102,], ty='l')


\subsection{Subset Sites}

Olivia has two sites in here data, so, we need to subset it.


%unique(import$STATION_NAME)


Let's choose the FAIRPLEX NY US because the record is longer than the airport.


%LosAngeles <- subset(import, STATION_NAME=="LOS ANGELES DOWNTOWN USC CA US", select=c(STATION, STATION_NAME, DATE, NewDate, TMIN, TMAX, PRCP))


%plot(TMAX~NewDate, LosAngeles, ty='l')



Okay, you know have created a data frame. To confirm this, type \texttt{str(maunaloa)} and you should see some strange text that describes the data frame. This function allow you to peer into the data frame structure. You you see it is a data frame and it has several variables and each one has certain characteristics and R even shows you some of the observations. This is a good thing to get into the habitat of check, for you want to ensure the data have been imported in a way that you expect.

Remember, a data frame is a list of vectors. To access the data inside the data frame, you can use the following command

<<echo = T, results = 'hide' >>=
#maunaloa$average
@

to dump the average CO$_2$ concentrations readings onto your screen as a vector. You should see some ~627 observations, depending on how recent the data have been uploaded. So, the dollar symbol is used to drill into the data frame vectors.  And when you look at the \texttt{str()} function again, you will see these dollar signs again.

\section{Preparing Records for Analysis}

\subsection{Converting Dates}

\subsection{Re-assigning Missing Values}



\end{document}